{
    "collab_server" : "",
    "contents" : "# JMJPFU\n# New file to mimic the ID generation\n\nlibrary(dplyr)\n\n\nfor(i in 1:nrow(Student_school_Association)){\n  \n  tempid <- paste(Student_school_Association[i,1]) # Getting the Id of the student\n  \n  tempred <- Student_school_Association[i,] # Get all the records for that student\n  \n  # Data 1 ##  First getting the Discipline data for this student\n  \n  temp_discipline <- Stud_Disc_InAsc_Master %>% filter(StudentUniqueId==tempid)\n  \n  if(nrow(temp_discipline) > 0){\n    \n    tab2 <- Stud_Disc_Act_Master %>% filter(StudentUniqueId==tempid) # Taking the info from the Discipline action data\n    tab3 <- merge(temp_discipline,Discipline_Indicator_Master,by=\"IncidentIdentifier\",all.x=TRUE) # getting all information\n    tab3$IncidentDate <- as.Date(as.character(tab3$IncidentDate)) # Converting the date to a charachter object and then making a new date format\n    \n    \n    tab3 <- tab3 %>% select(BehaviorDetailedDescription,IncidentDate)\n    \n    colnames(tab3)[2] <- \"Date\"\n    \n    temp_discipline <- merge(tab3,Discipline_template,by=\"BehaviorDetailedDescription\",all.x=TRUE) \n    \n    colnames(temp_discipline)[3] <- \"Discore\"\n    \n    \n  } # If condition for checking whether there are any discipline data for the considered student\n  \n  \n  # Data 2 ## Getting the Attendence data like the discipline data\n  \n  temp_attendence <- attend_trans %>% filter(StudentUniqueStateId==tempid) # Not a single incidence of absenteeism\n  \n  # Take only relevant columns in temp_attendence\n  \n  temp_attendence <- temp_attendence %>% select(StudentUniqueStateId,Date)\n  \n  # Data 3 ## Getting the grade information of the particular student\n  \n  temp_grade <- stud_grade %>% filter(ns1.StudentUniqueStateId==tempid)\n  \n  # Data 4 ## Getting the temp timeline\n  \n  temp_timeline <- samp_dates\n  \n  colnames(temp_timeline)[1] <- \"Date\" # Renaming the temp_timeline date column\n  \n  # Data Merge 1 # Attendence data Merge\n  \n  if(nrow(temp_attendence) > 0){\n    \n    temp_timeline <- merge(temp_timeline,temp_attendence,by=\"Date\",all=TRUE) # merged all records of attendence\n    \n  }else {\n    \n    temp_timeline[,3] <- NA\n    colnames(temp_timeline)[3] <- c(\"StudentUniqueStateId\")\n    \n    \n  } # End of If loop for temp_attendence merge\n  \n  # JMJPFU\n  # 20-Sept-2016\n  \n  # Data Merge 2 - Discipline data\n  \n  # Cleaning up the discipline data\n  \n  if(nrow(temp_discipline) > 0) {\n    \n    # Merging the data sets\n    \n    temp_timeline <- merge(temp_timeline,temp_discipline,by=\"Date\",all=TRUE)\n    \n    \n  }else{\n    \n    temp_timeline[,4:5] <- NA \n    colnames(temp_timeline)[4:5] <- c(\"BehaviorDetailedDescription\",\"Discore\" )\n    \n    \n  } # End of the If loop for discipline merge\n  \n  \n  # Data Merge 3 - Getting the grade data\n  \n  # Getting the basic dates\n  \n  grad_dates <- data.frame(Dates=c(\"2015-10-13\",\"2015-11-10\",\"2015-12-16\",\"2016-02-04\",\"2016-03-07\",\"2016-04-07\",\"2016-06-10\"))\n  \n  grad_dates[,2:28] <- NA # Defining the rest 27 variables pertaining to grades\n  \n  colnames(grad_dates)[1] <- \"Date\"\n  \n  colnames(grad_dates)[2:28] <- c(\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"23\",\"26\",\"28\",\"29\",\"RA\", \"RB\",\"EA\",\"EB\",\"MA\",\"MB\",\"AS\",\"BS\",\"SA\",\"SB\") \n  \n  # Calling the function to fix the grade details\n  \n  if(nrow(temp_grade) > 0){\n    \n    samp_grade <- get_grade(temp_grade,grad_dates) # Getting all the grade information in samp_grade \n    \n    samp_grade$Studid <- paste(temp_grade$ns1.StudentUniqueStateId[1])\n    \n  }else{\n    samp_grade <- grad_dates\n    samp_grade$Studid <- NA\n  \n  }\n  \n  \n  \n  \n  \n  # Merging the grade info with the temp_timline\n  \n  temp_timeline <- merge(temp_timeline,samp_grade,by=\"Date\",all=TRUE) \n  \n  # Data Operation 3 - Cleaning up all the merged data and creating a final data frame\n  \n  Final_timeline <- data.frame(matrix(nrow=0,ncol=33))\n  colnames(Final_timeline) <- names(temp_timeline)\n  \n  # Now to eliminate all those rows where there is no data.\n  \n  cou = 0\n  \n  for(i in 1:nrow(temp_timeline)){\n    \n    for(j in 3:32){\n      \n      if(!is.na(temp_timeline[i,j])){ \n        cou = cou+1\n        for(k in 1:33){\n          Final_timeline[cou,k] <- paste(temp_timeline[i,k])\n        }\n        break\n      } # End of the if loop\n      \n    } # End of the columns for loop\n    \n  } # End of the rows For loop\n  \n  # Changing the Date in Final timeline to a Date format\n  \n  Final_timeline$Date <- as.Date(Final_timeline$Date)\n  \n  \n  \n \n  \n  # Creating the final data set for all the students\n  \n  All_Stud_IDs <- rbind(All_Stud_IDs,Final_timeline)\n  \n  \n  \n  \n} # End of the file where we iterate over the list of students\n\nAll_Stud_IDs <- data.frame(matrix(nrow=0,ncol=33))\ncolnames(All_Stud_IDs) <- names(Final_timeline)\n\n\n# JMJPFU\n# 21-Sept-2016\n\n# Now that we have made the initial level of the data frame now to analyse them further. Let us do some checks on the data set\n\n# Now to make a consolidated data set for further analysis\n\n# Now to convert the numbers into some dates\nAll_Stud_timeline$Datenew <- as.Date(All_Stud_timeline$Date,origin=\"1970-01-01\")\n\n# Taking a back up of the data\nAll_Stud_backup <- All_Stud_timeline \n\n# Cleaning up the UniqueID's\n\nAll_Stud_timeline <- All_Stud_timeline[2:679484,] # Removing the first row which was NA\n\nfor(i in 1:nrow(All_Stud_timeline)){\n  \n  tempid <- paste(All_Stud_timeline$StudentUniqueStateId[i])\n  \n  if(tempid ==\"NA\"){All_Stud_timeline$StudentUniqueStateId[i] <- All_Stud_timeline$StudentUniqueStateId[(i-1)]  }\n  \n  \n}\n\n",
    "created" : 1474456034979.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "3938564234",
    "id" : "1ADD347A",
    "lastKnownWriteTime" : 3829520119066096494,
    "last_content_update" : 1474463119167,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}